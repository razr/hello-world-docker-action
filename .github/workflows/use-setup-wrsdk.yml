# Download SDK using a callable workflow
#
# $ act workflow_dispatch -v -W .github/workflows/use-setup-wrsdk.yml \
#   -P ubuntu-22.04=catthehacker/ubuntu:act-22.04 \
#   -e .github/actions/setup-wrsdk/act-e.json \
#   --container-options "-v $HOME/Downloads/wrsdk-vxworks7-qemu:/tmp/wrsdk"
#
# $ cat .github/actions/setup-wrsdk/act-e.json
# {
#  "inputs": {
#    "sdk_name": "qemu",
#    "vxworks_release": "24.03"
#   }
# }
#

name: 'Use a setup WRLabs SDK'
run-name: Setup ${{ inputs.vxworks_release }} ${{ inputs.sdk_name }} SDK

on:
  workflow_dispatch:
    inputs:
      sdk_name:
        description: 'SDK Name'
        required: false
        default: 'qemu'
      vxworks_release:
        description: 'VxWorks Release'
        required: false
        default: '24.03'
      repository_url:
        description: 'Repository to checkout'
        required: false
        default: 'https://github.com/leethomason/tinyxml2'
      repository_branch:
        description: 'Branch to checkout'
        required: false
        default: 'master'

jobs:
  call-download-sdk:
    runs-on: ubuntu-22.04
    env:
      sdk_name: ${{ github.event.inputs.sdk_name }}
      vxworks_release: ${{ github.event.inputs.vxworks_release }}
      working_dir: /tmp

    steps:
      - name: Checks-out a branch
        uses: actions/checkout@v4
#        with:
#          ref: ${{ github.ref }}

      - name: Use Setup SDK action
        uses: ./.github/actions/setup-wrsdk
        with:
          sdks_list: wrsdks.json
          sdk: $sdk_name
          vxworks: $vxworks_release
          directory: $working_dir

      - name: Setup package
        run: |
          build_dir=$working_dir/build
          mkdir -p $build_dir
          pkg_name=$(echo $repository_url | rev | cut -d '/' -f 1 | rev)
          pkg_build_dir=build
          pkg_src_dir=src
          pkg_log_dir=log
          mkdir -p $build_dir/$pkg_name/$pkg_build_dir
          mkdir -p $build_dir/$pkg_name/$pkg_log_dir

          # Save variables to GITHUB_ENV
          echo "BUILD_DIR=$build_dir" >> $GITHUB_ENV
          echo "PKG_NAME=$pkg_name" >> $GITHUB_ENV
          echo "PKG_BUILD_DIR=$pkg_build_dir" >> $GITHUB_ENV
          echo "PKG_SRC_DIR=$pkg_src_dir" >> $GITHUB_ENV
          echo "PKG_LOG_DIR=$pkg_log_dir" >> $GITHUB_ENV

      - name: Unpack package
        id: unpack
        run: |
          cd $BUILD_DIR/$PKG_NAME
          git clone ${{ github.event.inputs.repository_url }} $PKG_SRC_DIR
          cd $PKG_SRC_DIR
          git checkout $repository_branch

      - name: Configure package
        id: configure
        run: |
          cd $BUILD_DIR/$PKG_NAME/$PKG_BUILD_DIR
          cmake ../$PKG_SRC_DIR -DCMAKE_TOOLCHAIN_FILE=$WIND_CC_SYSROOT/mk/toolchain.cmake 2>&1 \
          | tee $BUILD_DIR/$PKG_NAME/$PKG_LOG_DIR/stdout_stderr.log

      - name: Compile package
        id: compile
        run: |
          cd $BUILD_DIR/$PKG_NAME/$PKG_BUILD_DIR
          make -j 8 2>&1 \
          | tee -a $BUILD_DIR/$PKG_NAME/$PKG_LOG_DIR/stdout_stderr.log
